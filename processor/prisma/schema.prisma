// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String 
  email String
  password String
}

model Zap {
  id String @id @default(uuid())
  triggerId String
  trigger Trigger?
  actions Action[]
  zapRuns ZapRun[]
}
// zap -> actions => one to many relationships 

model Action {
  id String @id @default(uuid())
  zapId String
  actionId String
  
  type AvailableActions @relation(fields: [actionId], references: [id])
  zap Zap @relation(fields: [zapId], references: [id])
}

model AvailableActions {
  id String @id @default(uuid())
  name String
  actions Action[]

}

model Trigger{
  id String @id @default(uuid())
  zapId String @unique
  triggerId String @unique
  
  type AvailableTriggers @relation(fields: [triggerId], references: [id])  // reverse relation  
  zap Zap @relation(fields: [zapId], references: [id])
}

model AvailableTriggers {
  id String @id @default(uuid())
  name String 
  triggers Trigger[]
}
  
model ZapRun {
  id String @id @default(uuid())
  zapId String
  metadata Json
  zap Zap @relation(fields: [zapId], references: [id])
  zapRunOutbox ZapRunOutbox?
}

// for transactions  and kafka 

model ZapRunOutbox {
  id String @id @default(uuid())
  zapRunId String @unique
  zapRun ZapRun  @relation(fields: [zapRunId], references: [id])
}


